#!/usr/bin/env python3
"""
Targeted Corruption Cleaner
Specifically removes the corrupted dialogue sections identified by the corruption detector
"""

import re
import os
import glob

def clean_corrupted_dialogue_section(content, section_num):
    """
    Clean a specific corrupted dialogue section
    """
    # Pattern to match the dialogue section
    section_pattern = f'(## Dialogues Section {section_num}:.*?)(?=\n## Dialogues Section|\n[^#]|\Z)'
    
    def replacement_func(match):
        section_content = match.group(1)
        lines = section_content.split('\n')
        header_lines = []
        
        # Keep the header and source lines
        for line in lines:
            if line.startswith('## Dialogues Section') or line.startswith('*Source:') or line.startswith('**'):
                header_lines.append(line)
            else:
                break
        
        # Replace content with placeholder
        cleaned_section = '\n'.join(header_lines) + '\n[Content removed - contained corrupted/encoded text]\n'
        return cleaned_section
    
    return re.sub(section_pattern, replacement_func, content, flags=re.DOTALL)

def clean_file_corrupted_sections(file_path, corrupted_sections):
    """
    Clean all corrupted sections in a file
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_size = len(content)
        
        # Clean each corrupted section
        for section_num in corrupted_sections:
            content = clean_corrupted_dialogue_section(content, section_num)
        
        # Write back the cleaned content
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        new_size = len(content)
        size_reduction = original_size - new_size
        
        print(f"‚úÖ Cleaned {len(corrupted_sections)} sections in {os.path.basename(file_path)}")
        print(f"   Size reduced by {size_reduction:,} characters")
        return True
        
    except Exception as e:
        print(f"‚ùå Error cleaning {file_path}: {str(e)}")
        return False

def main():
    """
    Clean corrupted sections based on corruption detector results
    """
    # Manually specify the corrupted sections found by the detector
    corrupted_files = {
        'panacea_00002.md': [20937, 22331, 23052, 23057, 23169, 23254, 23286, 23621, 23687, 24052, 24350, 24396, 24986, 25410, 26213, 26471, 26850, 27888],
        'panacea_00003.md': [39, 40, 42, 46, 47, 49, 53, 54, 56, 57, 60, 64, 83, 84, 85, 87, 88, 90, 93, 119, 124, 144, 150, 154, 155, 157, 160, 162, 165, 168, 177, 178, 191, 192, 193, 194, 202, 204, 205, 206, 207, 208, 246, 247, 252, 254, 255, 270, 271, 275, 276, 282, 283, 286, 287, 296, 297, 298, 304, 307, 308, 344, 348, 370, 388, 389, 393, 394, 400, 401, 405, 406, 407, 417, 418, 426, 431, 439, 454, 455, 459, 463, 487, 488, 489, 492, 506, 512, 513, 666, 938, 950, 958, 959, 961, 964, 966, 968, 971, 972, 977, 978, 983, 984, 986, 1003, 1005, 1007, 1012, 1269, 1271, 1272, 1275, 1278, 1283, 1284, 1285, 1288, 1293, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 2092, 2094, 2104, 2105, 2106, 2108, 2272, 2285, 2438, 2439, 2440, 2485, 2491, 2495, 2497, 2503, 2516, 2524, 2526, 2527, 2530, 2534, 2536, 2539, 2650, 2651, 2652, 2696, 2697, 2773, 2860, 2863, 2894, 2895, 2897, 2907, 2911, 2916, 2934, 2935, 2946, 2952, 2959, 2989, 3000, 3005, 3006, 3088, 3094, 3095, 3100, 3107, 3114, 3115, 3126, 3127, 3139, 3157, 3167, 3168, 3169, 3171, 3172, 3181, 3231, 3240, 3241, 3248, 3249, 3282, 3376, 3377, 3380, 3381, 3429, 3431, 3432, 3536, 3537, 3668, 3669, 3674, 3682, 3683, 3684, 3695, 3696, 3706, 3707, 3727, 3880, 3910, 3911, 3944, 3945, 3947, 3951, 4034, 4039, 4044, 4172, 4441, 3528, 4450, 4451, 3562, 4461, 4474, 3666, 4478, 3718, 4492, 4493, 4499, 4500, 4503, 4510, 3967, 4511, 4512, 4513, 4514, 4516, 4524, 4607, 4616, 4617, 4623, 4624, 4752, 4764, 10059, 4769, 10156, 4770, 4771, 10157, 4865, 4866, 4893, 4909, 4951, 4955, 4998, 5006, 5142, 5143, 5155, 5166, 12371, 5169, 5170, 5217, 5262, 5310, 5311, 5319, 5323, 5339, 5340, 5362, 5363, 5372, 5397, 5398, 5399, 5429, 5430, 5432, 5433, 5493, 5494, 5499, 5528, 5529, 5530, 5548, 5549, 5559, 5573, 5589, 5597, 5653, 5734, 5756, 5770, 5780, 5788, 5790, 5854, 5877, 16557, 5882, 5897, 5901, 5935, 5990, 5991, 5992, 6007, 6029, 6035, 6083, 6110, 6127, 6216, 6253, 6261, 6264, 6270, 6285, 6291, 6302, 6306, 6311, 6322, 6327, 6333, 6334, 6345, 6364, 6371, 6379, 6380, 6393, 18086, 6401, 6406, 6413, 6419, 6421, 6430, 6441, 6442, 6445, 6447, 6450, 6479, 6491, 18374, 6571, 6576, 6577, 6593, 6594, 6610, 6613, 6621, 6652, 6656, 6661, 6665, 6666, 6721, 6734, 6752, 6753, 6771, 6809, 6831, 6833, 6840, 6849, 6850, 6861, 6867, 6870, 6885, 6888, 6889, 6893, 6897, 6903, 6912, 6914, 6915, 6924, 6925, 6939, 6940, 6964, 6968, 6995, 7012, 7039, 7054, 7063, 7071, 7072, 7073, 7091, 7092, 7093, 7105, 7106, 7107, 7108, 7111, 7114, 7115, 7117, 7139, 7240, 7242, 7258, 7275, 7281, 7301, 7320, 7321, 7362, 7374, 7390, 7392, 7393, 7401, 7403, 7407, 7409, 7426, 7428, 7430, 7431, 7432, 7441, 7446, 23210, 7447, 7449, 7450, 7463, 7465, 7466, 7473, 7474, 7485, 7494, 7506, 7528, 7529, 7530, 7532, 23984, 7535, 7541, 24071, 7573, 24412, 7589, 24497, 7595, 7596, 7607, 24747, 7613, 24823, 7615, 7616, 7623, 7634, 7647, 7655, 7656, 7661, 7662, 7685, 25532, 7701, 25679, 7702, 7711, 7712, 7713, 25769, 7727, 26072, 7742, 7743, 7745, 7747, 7748, 7749, 7750, 7795, 26381, 7852, 7869, 26587, 7906, 7963, 7968, 7969, 7976, 7983, 7984, 8045, 8067, 27519, 8090, 8109, 8110, 8123, 8124, 8127, 27631, 8145, 8146, 8148, 8163, 8171, 8185, 27744, 8213, 8215, 8216, 8219, 8222, 8223],
        'panacea_00004.md': [11090, 11093, 11104, 11105, 11106, 11112, 11113, 11117, 11124, 11128, 11129, 11134, 11135, 11136, 11154, 11155, 11174, 11187, 11188, 11193, 11194, 11229, 11233, 11242, 11244, 11250, 11262, 11270, 11276, 11282, 11284, 11286, 11288, 11295, 11301, 11302, 11307, 11308, 11323, 11324, 11331, 11359, 11360, 11361, 11365, 11366, 11383, 11418, 11482, 11483, 11639, 11764, 11772, 11773, 11779, 11781, 11797, 11809, 11810, 11811, 11813, 11814, 11826, 11860, 12016, 12063, 12166, 12167, 12204, 12290, 12442, 3538, 12443, 12445, 12446, 12491, 12499, 12505, 4182, 12506, 12527, 12528, 12533, 12536, 12550, 12655, 12667, 12668, 10182, 12669, 12749, 12750, 12751, 12757, 12760, 12782, 12801, 12808, 12809, 12815, 12825, 10990, 12842, 12855, 12889, 12895, 12896, 12897, 12941, 12942, 12977, 12981, 12997, 13015, 13026, 13064, 13097, 13098, 13133, 13489, 13166, 13167, 13179, 13192, 13198, 13227, 13235, 13281, 13296, 13358, 13359, 13361, 13398, 13401, 13404, 13418, 13462, 13550, 13573, 13588, 13598, 13608, 13624, 13646, 13662, 13687, 13705, 13709, 13711, 13712, 13716, 13717, 13733, 13738, 13755, 13761, 13762, 13768, 13786, 13787, 13790, 13796, 13807, 13824, 13825, 13836, 18286, 13846, 13850, 18362, 13854, 13891, 13895, 18722, 13913, 13929, 13931, 13980, 14007, 14047, 14058, 14153, 14154, 14199, 14206, 14210, 14254, 14255, 14319, 14351, 14358, 14385, 14389, 14391, 14394, 14397, 14400, 14414, 14432, 14433, 14445, 14446, 14504, 14524, 14541, 14555, 14630, 14631, 14650, 14653, 14654, 14655, 14659, 14687, 14688, 14689, 14691, 14692, 14693, 14696, 14699, 14746, 14749, 14765, 14766, 14767, 14768, 14771, 14772, 14780, 14781, 14785, 14786, 14787, 14799, 14800, 14819, 14820, 14831, 14833, 14838, 14839, 14840, 14841, 14843, 14844, 14849, 14854, 14872, 14873, 14876, 14893, 14894, 14895, 14905, 14906, 14907, 14914, 14915, 14916, 14917, 14918, 14920, 14921, 14922, 14936, 14938, 14940, 14975, 14976, 14989, 14990, 14991, 14993, 14996, 15020, 15022, 15026, 15099, 15105, 15132, 15133, 15144, 15149, 15154, 15164, 15193, 15195, 15237, 15238, 15239, 15240, 15257, 15258, 15259, 15271, 15272, 15277, 15278, 15279, 15280, 15281, 15282, 15283, 15284, 15285, 15333, 18064, 18065, 18066, 18068, 18069, 18070, 18075, 18076, 18079]
    }
    
    current_dir = os.path.dirname(os.path.abspath(__file__))
    panacea_dir = os.path.join(current_dir, 'panacea')
    
    total_cleaned = 0
    
    print("üßπ Cleaning identified corrupted sections...")
    print("=" * 60)
    
    for filename, sections in corrupted_files.items():
        if os.path.exists(panacea_dir):
            file_path = os.path.join(panacea_dir, filename)
        else:
            file_path = os.path.join(current_dir, filename)
        
        if os.path.exists(file_path):
            if clean_file_corrupted_sections(file_path, sections):
                total_cleaned += len(sections)
        else:
            print(f"‚ö†Ô∏è  File not found: {filename}")
    
    print("=" * 60)
    print(f"üìä Total corrupted sections cleaned: {total_cleaned}")

if __name__ == "__main__":
    main()
