#!/usr/bin/env python3
"""
PANACEA COMPLETE EXTRACTOR
Combines all panacea content from various sources and creates a comprehensive extraction
"""

import os
import glob
from datetime import datetime
from pathlib import Path

def extract_panacea_content():
    """Extract and combine all panacea content"""
    
    base_path = Path("/Users/sunghkim37/Library/CloudStorage/GoogleDrive-britkenko@gmail.com/My Drive/PACO")
    
    # Define all panacea source locations
    panacea_sources = [
        # Main panacea directory
        base_path / "Gitpaco/panacea",
        # ChatGPT record panacea files
        base_path / "chatgpt record",
    ]
    
    print("🧠 PANACEA COMPLETE EXTRACTION STARTING...")
    print("=" * 60)
    
    extracted_content = []
    total_files = 0
    total_size = 0
    
    # Header for the extraction
    header = f"""# 🧠 PANACEA COMPLETE EXTRACTION 🧠
# Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
# Sources: Multiple panacea archives and chunks
# Purpose: Complete panacea content consolidation

"""
    extracted_content.append(header)
    
    # Process each source location
    for source_path in panacea_sources:
        if not source_path.exists():
            continue
            
        print(f"📂 Processing: {source_path}")
        
        # Find all panacea-related files
        panacea_patterns = [
            "panacea*.md", "panacea*.txt", 
            "*panacea*.md", "*panacea*.txt",
            "PANACEA*.md", "*PANACEA*.md"
        ]
        
        for pattern in panacea_patterns:
            files = list(source_path.glob(pattern))
            for file_path in files:
                if file_path.is_file():
                    try:
                        # Check file size (skip very large files >100MB)
                        file_size_mb = file_path.stat().st_size / (1024 * 1024)
                        
                        if file_size_mb > 100:
                            print(f"   ⚠️  Skipping large file: {file_path.name} ({file_size_mb:.1f} MB)")
                            continue
                        
                        # Read file content
                        try:
                            with open(file_path, 'r', encoding='utf-8') as f:
                                content = f.read()
                        except UnicodeDecodeError:
                            # Try alternative encoding
                            with open(file_path, 'r', encoding='latin-1') as f:
                                content = f.read()
                        
                        # Add file section header
                        section_header = f"""

## 📄 SOURCE: {file_path.name}
**Path:** `{file_path}`  
**Size:** {file_size_mb:.2f} MB  
**Processed:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

---

"""
                        extracted_content.append(section_header)
                        extracted_content.append(content)
                        
                        total_files += 1
                        total_size += file_size_mb
                        
                        print(f"   ✅ Extracted: {file_path.name} ({file_size_mb:.2f} MB)")
                        
                    except Exception as e:
                        print(f"   ❌ Error processing {file_path.name}: {e}")
    
    # Create output
    output_path = base_path / "Gitpaco" / "PANACEA_COMPLETE_EXTRACTION.md"
    
    # Combine all content
    full_content = "".join(extracted_content)
    
    # Add summary footer
    footer = f"""

---

# 📊 EXTRACTION SUMMARY

**Total Files Processed:** {total_files}  
**Total Content Size:** {total_size:.2f} MB  
**Extraction Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**Generated By:** PANACEA Complete Extractor  

## 🎯 Content Overview
This extraction combines all available panacea content from:
- Main panacea directory chunks and files
- ChatGPT record panacea archives
- Processed conversation data
- Transcendence analysis materials

## 🔄 Processing Notes
- Large files (>100MB) were skipped for performance
- Multiple encoding attempts were made for problematic files
- Content preserved in original format with source attribution
- Timestamps maintained for tracking purposes

---

*End of Panacea Complete Extraction*
"""
    
    full_content += footer
    
    # Write output
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(full_content)
    
    output_size = len(full_content) / (1024 * 1024)
    
    print("\n" + "=" * 60)
    print("🎉 PANACEA EXTRACTION COMPLETE!")
    print(f"📁 Output: {output_path}")
    print(f"📊 Files processed: {total_files}")
    print(f"📏 Total size: {total_size:.2f} MB")
    print(f"💾 Output size: {output_size:.2f} MB")
    print("=" * 60)
    
    return str(output_path)

if __name__ == "__main__":
    extract_panacea_content()
